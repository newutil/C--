/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 - 2021 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/stdlib.cmm : C-- のライブラリ関数
 *
 * 2021.01.12 : iMalloc等を追加
 * 2016.02.25 : TacOS の usr/lib/lib.cmm をもとに作成
 *
 * $Id$
 */


#include "stdlibUtil.hmm"


// -------------------------- メモリ初期化ルーチン ----------------------------
// メモリ管理の初期化
public MemBlk _memPool = {null, 0};             // 空き領域リストのルート
public int _end();                              // プロセスの BBS 領域の最後
public int _lfsr = 1;                           // 擬似乱数の初期化（0で初期化はNG)
// メモリの初期化
//   メモリの開始アドレス addrof(_end)
//   メモリの最終アドレス _sp();
//   メモリの大きさ       _sp() - addrof(_end)
public void _stdlibInit() {                     // プログラム起動前の初期化
  _memPool.next = _iToA(addrof(_end));           // 空き領域
  _memPool.next.size = _sp() - addrof(_end);     // 空きメモリサイズ
  _memPool.next.next = null;
  _alcAddr = _iToA(addrof(_end));               // 割当アドレスの初期化
}