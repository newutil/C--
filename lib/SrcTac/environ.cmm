/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019-2021
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/environ.cmm : 環境変数
 *
 * 2021.01.12: iMalloc等を使用するように変更
 * 2020.07.15: 環境変数，カレントディレクトリ関連のバグ修正
 * 2019.11.13: 新規作成
 *
 * $Id$
 */
#include <crt0.hmm>
#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <syslib.hmm>
#include <errno.hmm>
#include <sys/fs.hmm>

// 環境変数の配列（environ 配列の末尾には null が複数存在する場合がある）
public char[][] environ;

// environ 確保済みの配列サイズ
int _capacity;

// 環境変数の初期化
public void _environInit(char[][] envp) {
  int envs = 0;
  while (envp[envs] != null) {
    envs = envs + 1;                                        // 要素数を得る
  }
  _capacity = envs + 1;                                      // 要素数 + null
  environ = rMalloc(_capacity);
  for (int i = 0; i < envs; i = i + 1) {                    // 要素をコピー
    int len = strLen(envp[i]);
    environ[i] = cMalloc(len + 1);
    strCpy(environ[i], envp[i]);
  }
  environ[envs] = null;                                     // null 終端
}

// environ 中のインデックスを返す。存在しなければ環境変数の個数を返す
// 存在しなければ、 environ[_envIndex(name, len)] == null になる
int _envIndex(char[] name, int len) {
  int i = 0;
  for (; environ[i] != null; i = i + 1) {
    int nameLen = strChr(environ[i], '=');
    if (len == nameLen && strNcmp(environ[i], name, len) == 0) {
      return i;
    }
  }
  return i;
}

// 環境変数の値を返す。存在しなければ null を返す。
public char[] getEnv(char[] name) {
  int index = _envIndex(name, strLen(name));                 // 名前で探索する
  if (environ[index] == null) {                             // 存在しなければ
    return null;                                            //   null を返す
  }
  return _addrAdd(environ[index], strLen(name) + 1);        // 値部分を返す
}

// environ 参照配列を再割付する
void reallocEnv(int newCap) {
  char[][] newEnv = rMalloc(newCap);                        // 新しい配列を確保
  int envs = 0;
  for (; environ[envs] != null; envs = envs + 1) {          // 全環境変数を
    newEnv[envs] = environ[envs];                           //   新配列にコピー
  }
  newEnv[envs] = null;                                      // null 終端
  free(environ);                                            // 古い配列を解放
  environ = newEnv;                                         // 配列と
  _capacity = newCap;                                        //  配列サイズを
}                                                           //   更新する

// 環境変数を表現する文字列（"名前=値"）を作る
char[] makeEnvStr(char[] name, int nameLen, char[] value) {
  char[] string = cMalloc(nameLen+1+strLen(value)+1);       // メモリ確保
  strNcpy(string, name, nameLen+1);                         // 「名前」をコピー
  strCat(string, "=");                                      // "="を追加
  strCat(string, value);                                    // 「値」をコピー
  return string;
}

// 環境変数を追加・上書きする基本ルーチン
boolean _setNEnv(char[] name, int nameLen, char[] value, boolean overwrite) {
  if (name==null || nameLen<=0) {                           // name が変なら
    errno = EINVAL;                                         //  errnoを変更して
    return true;                                            //   エラー終了
  }
  int index = _envIndex(name, nameLen);                      // 環境変数を探索
  if (environ[index] == null) {                             // 同名のものは無い
    int size = index + 2;                                   //   追加処理開始
    if (size > _capacity) {                                  //   配列容量が不足
      reallocEnv(size);                                     //    配列を再割付
    }
    environ[index+1] = null;                                // null 終端
  } else {                                                  // 同名のものがある
    free(environ[index]);                                   //   古いものを解放
  }
  environ[index] = makeEnvStr(name, nameLen, value);        // "名前=値"を記録
  return false;                                             // 正常終了
}

// 環境変数を "名前=値" 形式の文字列を用いて設定
public boolean putEnv(char[] string) {
  int nameLen = strChr(string, '=');                        // '=' を探索する
  char[] value = _addrAdd(string, nameLen+1);               // 値のアドレス計算
  return _setNEnv(string, nameLen, value, true);             // _setNEnv で処理
}

// 環境変数を２つの文字列 "名前" ， "値" を用いて設定
// （overwrite が false で既に同名の環境変数が存在するなら何もしない）
public boolean setEnv(char[] name, char[] value, boolean overwrite) {
  if (strChr(name, '=') >= 0) {                             // nameが'='を含む
    errno = EINVAL;                                         //  errnoを変更して
    return true;                                            //   エラー終了
  }
  return _setNEnv(name, strLen(name), value, overwrite);     // 追加・上書きする
}

// 環境変数を削除（存在しなければ何もしない）
public boolean unsetEnv(char[] name) {
  int index = _envIndex(name, strLen(name));                 // 環境変数を探索
  if (environ[index] == null) {                             // 存在しないなら
    return false;                                           //  正常終了
  }
  free(environ[index]);                                     // メモリを解放する
  for (int i=index; environ[i]!=null; i=i+1) {              // より後ろの要素は
    environ[i] = environ[i+1];                              //    前につめる
  }
  return false;
}

// 意味のない "." を削除する
void delDotDir(char[] path) {
  int l = 0;
  for (int h=0; path[h]!='\0'; h=h+1) {
    path[l] = path[h];
    l = l + 1;
    if (path[h]=='/' && path[h+1]=='.' &&
        (path[h+2]=='/' || path[h+2]=='\0')) {              // "/." なら
        h = h + 1;                                          //   "." をスキップ
    }
  }
  path[l] = '\0';
}

// 連続する "/" を一つだけにする
void oneSlash(char[] path) {
  int l = 0;
  for (int h=0; path[h]!='\0'; h=h+1) {
    for (; path[h]=='/' && path[h+1]=='/'; h=h+1)           // "/" が連続なら
        ;                                                   //     スキップする
    path[l] = path[h];
    l = l + 1;
  }
  if (l>1 && path[l-1]=='/') l = l - 1;                     // 行末の / を消す
  path[l] = '\0';
}

// ".." があったら前のディレクトリを消す
void delDotDotDir(char[] path) {
  int l = 0;
  for (int h=0; path[h]!='\0'; h=h+1) {
    if (path[h]=='/' && path[h+1]=='.' && path[h+2]=='.'    // "/.." なら
        && (path[h+3]=='/' || path[h+3]=='\0')) {
      h = h + 2;                                            //   ".." をスキップ
      if (l>0) {
        for (l=l-1; l>0 && path[l]!='/'; l=l-1)             //   前の"/"まで削除
          ;
      }
    } else if (path[h]=='/' && path[h+1]=='\0') {          // 行末の "/" は
      break;                                               //   コピーしない
    } else {
      path[l] = path[h];
      l = l + 1;
    }
  }
  path[l] = '\0';
}

// 絶対パスを取得する。
Stat _sta = {0,0,0,0};
public boolean absPath(char[] path, char[] buf, int bufSiz) {
  if (path[0] == '/') {                                     // 1文字目が '/'
    strCpy(buf, "/");                                       //   "/"から始める
  } else {                                                  // それ以外
    char[] pwd = getWd();                                   //   PWDを取得
    if (strLen(pwd) >= bufSiz-2) {                          //   PWDが長すぎる
      errno = EINVAL;                                       //  errnoを変更して
      return true;
    }
    strCpy(buf, pwd);                                       //   pwd から開始
    strCat(buf, "/");                                       //   念のため/追加
  }
  if (strLen(buf)+strLen(path) >= bufSiz-1) {               // 十分なbufがない
    errno = EINVAL;                                         //  errnoを変更して
    return true;
  }
  strCat(buf, path);                                        // bufに結合する
  delDotDir(buf);                                           // "."を削除する
  oneSlash(buf);                                            // 連続の"/"を削除
  int l = strRchr(buf, '/') + 1;                            // 最後の"/"を探す
  if (l>0) {                                                // "/"があったなら
    char c = buf[l];                                        //   "/"の次で
    buf[l]='\0';                                            //    パスを切る
    if (_stat(buf, _sta)<0) return true;                     //    有効なpathか?
    if ((_sta.attr&0x10)==0) {                               //    DIRか?
      errno = ENOENT;                                       //      DIRではない
      return true;                                          //
    }
    buf[l]=c;                                               //    パスを復元
  }
  delDotDotDir(buf);                                        // ".."を処理
  if (buf[0]=='\0') strCpy(buf, "/");                       // 処理結果が""なら
  return false;
}

public char[] getWd() {
  char[] pwd = getEnv("PWD");
  if (pwd==null) pwd = "/";                         // PWD がない場合は "/"
  return pwd;
}

#define BUF 80
public boolean chDir(char[] path) {
  boolean err = false;
  char[] buf = cMalloc(BUF);
  if (absPath(path, buf, BUF)) {                    // 絶対パスに変換
    err = true;                                     //   absPath がエラー
  } else if ((_sta.attr&0x10)==0) {                  // ディレクトリではない
    errno = EPATH;
    err = true;
  } else if (setEnv("PWD", buf, true)) {            // 環境変数 PWD を変更
    err = true;                                     //   setEnv がエラー
  }
  free(buf);
  return err;
}
